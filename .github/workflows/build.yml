name: Build AndroidTVTimeFixer

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  actions: write

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: AndroidTVTimeFixer
  SOURCE_FILE: src/android_time_fixer.py
  POETRY_VERSION: '2.1.3'
  PYINSTALLER_VERSION: '6.13'
  ADB_VERSION: '35.0.2'

jobs:
  setup-and-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            adb_url: https://dl.google.com/android/repository/platform-tools-latest-windows.zip
            adb_base: "adb.exe AdbWinApi.dll AdbWinUsbApi.dll"
          - os: ubuntu-22.04
            platform: linux
            adb_url: https://dl.google.com/android/repository/platform-tools-latest-linux.zip
            adb_base: "adb"
          - os: macos-latest
            platform: macos
            adb_url: https://dl.google.com/android/repository/platform-tools-latest-darwin.zip
            adb_base: "adb"

    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Poetry cache
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/AppData/Local/pypoetry/Cache
            ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-
            poetry-${{ runner.os }}-

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install "poetry==${{ env.POETRY_VERSION }}"
        shell: bash

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry env use python
        shell: bash

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root --with dev --all-extras
          poetry run pip install "pyinstaller==${{ env.PYINSTALLER_VERSION }}" psutil
          if [ "${{ runner.os }}" == "Windows" ]; then
            poetry run pip install wmi
          fi
        shell: bash

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev libudev-dev
        shell: bash

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install openssl
        shell: bash

      - name: Setup ADB
        shell: bash
        run: |
          mkdir -p resources temp_adb
          curl -L ${{ matrix.adb_url }} -o temp_adb/platform-tools.zip
          unzip -o temp_adb/platform-tools.zip -d temp_adb/
          
          for file in ${{ matrix.adb_base }}; do
            cp "temp_adb/platform-tools/$file" "resources/$file"
            if [[ "$file" != *".dll" ]]; then
              chmod +x "resources/$file"
            fi
          done
          
          rm -rf temp_adb
          
      - name: Check Poetry source
        run: poetry config --list
        
      - name: Build executable
        run: poetry run pyinstaller --clean pyinstaller.spec
        shell: bash

      - name: Package build
        run: |
          cd dist
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a -tzip "${{ env.APP_NAME }}-${{ matrix.platform }}.zip" "${{ env.APP_NAME }}.exe"
          else
            chmod +x "${{ env.APP_NAME }}"
            zip -j "${{ env.APP_NAME }}-${{ matrix.platform }}.zip" "${{ env.APP_NAME }}"
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform }}
          path: dist/${{ env.APP_NAME }}-${{ matrix.platform }}.zip
          retention-days: 90
          if-no-files-found: error

  create-release:
    needs: setup-and-build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate release tag
        id: tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*.zip
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          generate_release_notes: true
